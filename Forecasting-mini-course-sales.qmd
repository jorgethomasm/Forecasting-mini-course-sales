---
title: "Forecasting Sales Time-Series with XGBoost"
subtitle: "Sale Products: Kaggle's mini-courses." # only for html output
author: "Jorge A. Thomas"
date: "`r Sys.Date()`"
format:    
    html:
      self-contained: true
      code-fold: true
      df-print: tibble
      code-summary: "Show the code"
      grid: 
        margin-width: 350px
execute: 
  echo: fenced
reference-location: margin # margin
citation-location: document
bibliography: minicoursesales.bib
# Template: https://quarto-dev.github.io/quarto-gallery/page-layout/tufte.html
---

## Introduction

Here I present my solution to Kaggle's competition **Forecasting Mini-Course Sales** of 2023. 

Playground Series - Season 3, Episode 19.

Using the synthetic-generated dataset [@playground-series-s3e19], you'll follow my workflow developing pipelines on the ETL phase of the Data Science cycle using the R programming language [@R-base], as well as a tidy approach to forecasting.

```{r}
#| label: setup
#| message: false
#| echo: false

library(tidyverse) # ETL and EDA tools
library(tictoc) # measure runtime
library(httpgd)

source("./libs/jthomfuncs.r")
theme_set(jthomggtheme)
```



```{r}
#| label: Load Data
#| warning: false

sales_train_raw <- read_csv("./data/raw/train.csv") # Train, validattion and test dataset
print("Dimensions of training dataset")
dim(sales_train_raw)

sales_test_raw <- read_csv("./data/raw/test.csv")  # Features for submission dataset
print("Dimensions of test dataset containing only Feats.")
dim(sales_test_raw) 

# Add Target column with NA so both DFs can be concatenated:.id
sales_test_raw <- 
  sales_test_raw |> 
    mutate(num_sold = NA)

# Binding and adding identifier column "dataset" 
sales_all <- 
  bind_rows(list(train = sales_train_raw, test = sales_test_raw), .id = "dataset")

print("Available variables:")
names(sales_all)

```

### Count NAs

```{r}
#| label: Counting NAs
#| code-fold: false

sales_all |>
  select(-num_sold) |>
  count_na() |>
  knitr::kable(caption = "Courses Sales dataset")

```

### Adding temporal features

```{r}

#' make a function of this!
#' expand_temporal_feats(datetime_colname)

sales_all <- sales_all |>
  mutate(year = year(date)) |>
  mutate(quarter = ceiling(month(date)/3)) |>
  mutate(month = month(date)) |>
  mutate(month_day = mday(date)) |>
  mutate(dow = wday(date, label = TRUE, abbr = FALSE)) |>
  mutate(isweekend = weekdays(date)  %in% c("Saturday", "Sunday"))

# Delete "Using LLMS to " from product col

sales_all <- sales_all |>
  mutate(product = str_remove(product, "Using LLMs to ")) 


# Establish categorical variables

sales_all <- sales_all |>
  mutate(country = factor(country)) |>
  mutate(store = factor(store)) |>
  mutate(product = factor(product)) 
 

# cat_feats <- c("country", "store", "product")
# cat_feats <- sales_all |>
#   mutate(across(all_of(cat_feats), ~ factor(.x, ordered = FALSE)))

```

### Visualise Total Sales

```{r}

sales_all |> 
  filter(dataset == "train") |>
  group_by(country) |>
  summarise(total_sales = sum(num_sold)) |>

  ggplot(aes(y = country, x = total_sales)) + 
  geom_col(aes(fill = country)) +
  geom_text(aes(label = total_sales), size = 6) +
  labs(y = "Country") + 
  theme(legend.position = "none", axis.title.y = element_text(angle = 90))


# Total Sales TS
sales_all |> 
  filter(dataset == "train") |>
  group_by(date) |>
  summarise(total_sales = sum(num_sold)) |>
  mutate(year = as.factor(year(date))) |>

  ggplot(aes(x = date, y = total_sales)) +
  labs(x = "", y = "Total\nSales") +
  geom_line(colour = "red") +
  scale_x_date(date_breaks = "1 month", date_labels = "%b") + 
  scale_y_continuous(breaks = seq(0, 24000, 2000)) + 
  facet_wrap(~year, scales = "free_x", nrow = 1) + 
  theme(axis.text.x  = element_text(angle = 90, size = 10) )
  

# "%b %d" "%a %d %m %R"


sales_all |> 
  filter(dataset == "train") |>
  group_by(date, country) |>
  summarise(total_sales = sum(num_sold)) 


```

### Add Pandemic Flag

